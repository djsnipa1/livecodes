{
  "version": 3,
  "sources": ["../../src/livecodes/html/index.ts", "../../src/livecodes/services/pkgInfo.ts", "../../src/livecodes/utils/utils.ts", "../../src/livecodes/UI/selectors.ts", "../../src/livecodes/UI/resources.ts"],
  "sourcesContent": ["// @ts-ignore\r\n// eslint-disable-next-line import/no-internal-modules\r\nimport resultTemplateRaw from './sandbox/v6/result.html';\r\n// @ts-ignore\r\nimport appHTMLRaw from './app.html';\r\n// @ts-ignore\r\nimport settingsMenuHTMLRaw from './settings-menu.html';\r\n// @ts-ignore\r\nimport languageInfoRaw from './language-info.html';\r\n// @ts-ignore\r\nimport customSettingsScreenRaw from './custom-settings.html';\r\n// @ts-ignore\r\nimport testEditorScreenRaw from './test-editor.html';\r\n// @ts-ignore\r\nimport importScreenRaw from './import.html';\r\n// @ts-ignore\r\nimport deployScreenRaw from './deploy.html';\r\n// @ts-ignore\r\nimport syncScreenRaw from './sync.html';\r\n// @ts-ignore\r\nimport backupScreenRaw from './backup.html';\r\n// @ts-ignore\r\nimport broadcastScreenRaw from './broadcast.html';\r\n// @ts-ignore\r\nimport welcomeScreenRaw from './welcome.html';\r\n// @ts-ignore\r\nimport aboutScreenRaw from './about.html';\r\n// @ts-ignore\r\nimport infoScreenRaw from './project-info.html';\r\n// @ts-ignore\r\nimport resourcesScreenRaw from './external-resources.html';\r\n// @ts-ignore\r\nimport loginScreenRaw from './login.html';\r\n// @ts-ignore\r\nimport savePromptScreenRaw from './save-prompt.html';\r\n// @ts-ignore\r\nimport recoverPromptScreenRaw from './recover-prompt.html';\r\n// @ts-ignore\r\nimport templatesScreenRaw from './templates.html';\r\n// @ts-ignore\r\nimport openScreenRaw from './open.html';\r\n// @ts-ignore\r\nimport assetsScreenRaw from './assets.html';\r\n// @ts-ignore\r\nimport addAssetScreenRaw from './add-asset.html';\r\n// @ts-ignore\r\nimport snippetsScreenRaw from './snippets.html';\r\n// @ts-ignore\r\nimport addSnippetScreenRaw from './add-snippet.html';\r\n// @ts-ignore\r\nimport shareScreenRaw from './share.html';\r\n// @ts-ignore\r\nimport embedScreenRaw from './embed.html';\r\n// @ts-ignore\r\nimport editorSettingsScreenRaw from './editor-settings.html';\r\n// @ts-ignore\r\nimport resultPopupHTMLRaw from './result-popup.html';\r\n\r\nconst replaceValues = (str: string) =>\r\n  str\r\n    .replace(/{{APP_VERSION}}/g, process.env.VERSION || '')\r\n    .replace(/{{SDK_VERSION}}/g, process.env.SDK_VERSION || '')\r\n    .replace(/{{COMMIT_SHA}}/g, process.env.GIT_COMMIT || '')\r\n    .replace(/{{REPO_URL}}/g, process.env.REPO_URL || '')\r\n    .replace(/{{DOCS_BASE_URL}}/g, process.env.DOCS_BASE_URL || '');\r\n\r\nconst resultTemplate = /* @__PURE__ */ replaceValues(resultTemplateRaw);\r\nconst appHTML = /* @__PURE__ */ replaceValues(appHTMLRaw);\r\nconst settingsMenuHTML = /* @__PURE__ */ replaceValues(settingsMenuHTMLRaw);\r\nconst languageInfo = /* @__PURE__ */ replaceValues(languageInfoRaw);\r\nconst customSettingsScreen = /* @__PURE__ */ replaceValues(customSettingsScreenRaw);\r\nconst testEditorScreen = /* @__PURE__ */ replaceValues(testEditorScreenRaw);\r\nconst importScreen = /* @__PURE__ */ replaceValues(importScreenRaw);\r\nconst deployScreen = /* @__PURE__ */ replaceValues(deployScreenRaw);\r\nconst syncScreen = /* @__PURE__ */ replaceValues(syncScreenRaw);\r\nconst backupScreen = /* @__PURE__ */ replaceValues(backupScreenRaw);\r\nconst broadcastScreen = /* @__PURE__ */ replaceValues(broadcastScreenRaw);\r\nconst welcomeScreen = /* @__PURE__ */ replaceValues(welcomeScreenRaw);\r\nconst aboutScreen = /* @__PURE__ */ replaceValues(aboutScreenRaw);\r\nconst infoScreen = /* @__PURE__ */ replaceValues(infoScreenRaw);\r\nconst resourcesScreen = /* @__PURE__ */ replaceValues(resourcesScreenRaw);\r\nconst loginScreen = /* @__PURE__ */ replaceValues(loginScreenRaw);\r\nconst savePromptScreen = /* @__PURE__ */ replaceValues(savePromptScreenRaw);\r\nconst recoverPromptScreen = /* @__PURE__ */ replaceValues(recoverPromptScreenRaw);\r\nconst templatesScreen = /* @__PURE__ */ replaceValues(templatesScreenRaw);\r\nconst openScreen = /* @__PURE__ */ replaceValues(openScreenRaw);\r\nconst assetsScreen = /* @__PURE__ */ replaceValues(assetsScreenRaw);\r\nconst addAssetScreen = /* @__PURE__ */ replaceValues(addAssetScreenRaw);\r\nconst snippetsScreen = /* @__PURE__ */ replaceValues(snippetsScreenRaw);\r\nconst addSnippetScreen = /* @__PURE__ */ replaceValues(addSnippetScreenRaw);\r\nconst shareScreen = /* @__PURE__ */ replaceValues(shareScreenRaw);\r\nconst embedScreen = /* @__PURE__ */ replaceValues(embedScreenRaw);\r\nconst editorSettingsScreen = /* @__PURE__ */ replaceValues(editorSettingsScreenRaw);\r\nconst resultPopupHTML = /* @__PURE__ */ replaceValues(resultPopupHTMLRaw);\r\n\r\nexport {\r\n  resultTemplate,\r\n  appHTML,\r\n  settingsMenuHTML,\r\n  languageInfo,\r\n  customSettingsScreen,\r\n  testEditorScreen,\r\n  importScreen,\r\n  deployScreen,\r\n  syncScreen,\r\n  backupScreen,\r\n  broadcastScreen,\r\n  welcomeScreen,\r\n  aboutScreen,\r\n  infoScreen,\r\n  resourcesScreen,\r\n  loginScreen,\r\n  savePromptScreen,\r\n  recoverPromptScreen,\r\n  templatesScreen,\r\n  openScreen,\r\n  assetsScreen,\r\n  addAssetScreen,\r\n  snippetsScreen,\r\n  addSnippetScreen,\r\n  shareScreen,\r\n  embedScreen,\r\n  editorSettingsScreen,\r\n  resultPopupHTML,\r\n};\r\n", "import type { APIError, CDNService, PkgInfo } from '../models';\r\n\r\n// see: https://github.com/jsdelivr/www.jsdelivr.com/blob/master/src/public/js/utils/search.js\r\n// info: https://github.com/jsdelivr/data.jsdelivr.com/issues/6\r\n\r\nconst getSearchApiUrl = (query: string) =>\r\n  `https://ofcncog2cu-dsn.algolia.net/1/indexes/npm-search/${encodeURIComponent(\r\n    query,\r\n  )}?x-algolia-agent=Browser`;\r\n\r\nconst algoliaHeaders = {\r\n  'X-Algolia-Application-Id': 'OFCNCOG2CU',\r\n  'X-Algolia-API-Key': 'f54e21fa3a2a0160595bb058179bfb1e',\r\n};\r\nconst attributesToRetrieve = ['name', 'description', 'homepage', 'repository.url', 'version'];\r\n\r\nconst apiEndpoint = 'https://data.jsdelivr.com/v1';\r\n\r\nconst jsDelivrHeaders = {\r\n  'User-Agent': 'https://livecodes.io',\r\n};\r\n\r\ninterface APIPkgFiles {\r\n  default: string;\r\n  files: Array<{ name: string }>;\r\n}\r\n\r\ninterface EntryPoints {\r\n  js?: {\r\n    file: string;\r\n    guessed: boolean;\r\n  };\r\n  css?: {\r\n    file: string;\r\n    guessed: boolean;\r\n  };\r\n}\r\n\r\nconst splitNameVersion = (nameVersion: string) => {\r\n  const scoped = nameVersion.startsWith('@');\r\n  const str = scoped ? nameVersion.slice(1) : nameVersion;\r\n  const [name, version] = str.split('@');\r\n  return [(scoped ? '@' : '') + name, version];\r\n};\r\n\r\nconst search = async (query: string, limit = 10): Promise<PkgInfo[] | APIError> => {\r\n  const options = {\r\n    page: 0,\r\n    hitsPerPage: limit,\r\n    attributesToHighlight: [],\r\n    attributesToRetrieve,\r\n    analyticsTags: ['jsdelivr'],\r\n  };\r\n\r\n  const [name, version] = splitNameVersion(query);\r\n  let exactVersion: string | undefined;\r\n  if (version) {\r\n    const versioned = await addPkgVersion(query);\r\n    if (typeof versioned === 'string') {\r\n      exactVersion = splitNameVersion(versioned)[1];\r\n    }\r\n  }\r\n\r\n  const data: { hits: PkgInfo[] } | APIError = await fetch(getSearchApiUrl('query'), {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json; charset=UTF-8',\r\n      ...algoliaHeaders,\r\n    },\r\n    body: JSON.stringify({\r\n      query: name,\r\n      ...options,\r\n    }),\r\n  })\r\n    .then((res) => {\r\n      if (!res.ok) throw new Error('failed to fetch');\r\n      return res;\r\n    })\r\n    .then((res) => res.json())\r\n    .catch((err) => ({\r\n      error: true,\r\n      message: err.mesage || String(err),\r\n    }));\r\n\r\n  if ('error' in data) {\r\n    return data;\r\n  }\r\n\r\n  const results: PkgInfo[] = data.hits.map((pkg) => {\r\n    if (pkg.name === name && exactVersion) {\r\n      pkg.version = exactVersion;\r\n    }\r\n    if (pkg.repository?.url) {\r\n      pkg.repo = pkg.repository?.url;\r\n    }\r\n    return pkg;\r\n  });\r\n  // An exact match should always come first.\r\n  results.sort((a, b) => (a.name === name ? -1 : b.name === name ? 1 : 0));\r\n\r\n  return results;\r\n};\r\n\r\nconst addPkgVersion = async (pkgName: string): Promise<string | APIError> => {\r\n  const url = `${apiEndpoint}/package/resolve/npm/${pkgName}`;\r\n  const data: PkgInfo | APIError = await fetch(url, { headers: jsDelivrHeaders })\r\n    .then((res) => {\r\n      if (!res.ok) throw new Error('failed to fetch');\r\n      return res;\r\n    })\r\n    .then((res) => res.json())\r\n    .catch((err) => ({\r\n      error: true,\r\n      message: err.mesage || String(err),\r\n    }));\r\n\r\n  if ('error' in data) {\r\n    return data;\r\n  }\r\n  const name = splitNameVersion(pkgName)[0];\r\n  const version = data.version;\r\n  return version ? `${name}@${version}` : name;\r\n};\r\n\r\nconst getPkgInfo = async (pkgName: string): Promise<PkgInfo | APIError> => {\r\n  const [name, version] = splitNameVersion(pkgName);\r\n\r\n  let exactVersion: string | undefined;\r\n  if (version) {\r\n    const versioned = await addPkgVersion(pkgName);\r\n    if (typeof versioned === 'string') {\r\n      exactVersion = splitNameVersion(versioned)[1];\r\n    }\r\n  }\r\n\r\n  const url = getSearchApiUrl(name) + '&attributesToRetrieve=' + attributesToRetrieve.join(',');\r\n  const data: PkgInfo | APIError = await fetch(url, {\r\n    method: 'GET',\r\n    headers: algoliaHeaders,\r\n  })\r\n    .then((res) => {\r\n      if (!res.ok) throw new Error('failed to fetch');\r\n      return res;\r\n    })\r\n    .then((res) => res.json())\r\n    .catch((err) => ({\r\n      error: true,\r\n      message: err.mesage || String(err),\r\n    }));\r\n\r\n  if ('error' in data) {\r\n    return data;\r\n  }\r\n\r\n  if (exactVersion) {\r\n    data.version = exactVersion;\r\n  }\r\n  if (data.repository?.url) {\r\n    data.repo = data.repository?.url;\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\nconst getPkgFiles = async (\r\n  pkgName: string,\r\n): Promise<{ default?: string; files: string[] } | APIError> => {\r\n  const pkgNameVersion = await addPkgVersion(pkgName);\r\n  const url = `${apiEndpoint}/package/npm/${pkgNameVersion}/flat`;\r\n  const data: APIPkgFiles | APIError = await fetch(url, { headers: jsDelivrHeaders })\r\n    .then((res) => {\r\n      if (!res.ok) throw new Error('failed to fetch');\r\n      return res;\r\n    })\r\n    .then((res) => res.json())\r\n    .catch((err) => ({\r\n      error: true,\r\n      message: err.mesage || String(err),\r\n    }));\r\n\r\n  if ('error' in data) {\r\n    return data;\r\n  }\r\n  const basePath = `https://cdn.jsdelivr.net/npm/${pkgNameVersion}`;\r\n  return {\r\n    ...(data.default ? { default: basePath + data.default } : {}),\r\n    files: data.files.map((f: { name: string }) => basePath + f.name),\r\n  };\r\n};\r\n\r\nconst getPkgDefaultFiles = async (\r\n  pkgName: string,\r\n): Promise<{ js?: string; css?: string } | APIError> => {\r\n  const pkgNameVersion = await addPkgVersion(pkgName);\r\n  const url = `${apiEndpoint}/package/npm/${pkgNameVersion}/entrypoints`;\r\n  const data: EntryPoints | APIError = await fetch(url, { headers: jsDelivrHeaders })\r\n    .then((res) => {\r\n      if (!res.ok) throw new Error('failed to fetch');\r\n      return res;\r\n    })\r\n    .then((res) => res.json())\r\n    .catch((err) => ({\r\n      error: true,\r\n      message: err.mesage || String(err),\r\n    }));\r\n\r\n  if ('error' in data) {\r\n    return data;\r\n  }\r\n  const basePath = `https://cdn.jsdelivr.net/npm/${pkgNameVersion}`;\r\n  return {\r\n    ...(data.js?.file ? { js: basePath + data.js?.file } : {}),\r\n    ...(data.css?.file ? { css: basePath + data.css?.file } : {}),\r\n  };\r\n};\r\n\r\nexport const pkgInfoService: CDNService = {\r\n  search,\r\n  getPkgInfo,\r\n  getPkgFiles,\r\n  getPkgDefaultFiles,\r\n};\r\n", "import type { Config, Language, Processor, WorkerMessageEvent } from '../models';\r\n\r\nexport const debounce = (fn: (...x: any[]) => any, delay: number | (() => number)) => {\r\n  let timeout: any;\r\n\r\n  return (...args: unknown[]) => {\r\n    if (timeout) clearTimeout(timeout);\r\n    timeout = setTimeout(() => fn.apply(null, args), typeof delay === 'function' ? delay() : delay);\r\n  };\r\n};\r\n\r\nexport const decodeHTML = (html: string) => {\r\n  const txt = document.createElement('textarea');\r\n  txt.innerHTML = html;\r\n  return txt.value;\r\n};\r\n\r\nexport const encodeHTML = (html: string) =>\r\n  html\r\n    .replace(/&/g, '&amp;')\r\n    .replace(/</g, '&lt;')\r\n    .replace(/>/g, '&gt;')\r\n    .replace(/'/g, '&#39;')\r\n    .replace(/\"/g, '&#34;');\r\n\r\nexport const escapeScript = (code: string) => code.replace(/<\\/script>/g, '<\\\\/script>');\r\n\r\nexport const escapeCode = (code: string, slash = true) =>\r\n  code\r\n    .replace(/\\\\/g, slash ? '\\\\\\\\' : '\\\\')\r\n    .replace(/`/g, '\\\\`')\r\n    .replace(/<\\/script>/g, '<\\\\/script>');\r\n\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nexport const pipe = (...fns: Function[]) =>\r\n  fns.reduce(\r\n    (f, g) =>\r\n      (...args: any) =>\r\n        g(f(...args)),\r\n  );\r\n\r\n// replace non-alphanumeric with underscore\r\nexport const safeName = (name: string, symbol = '_') => name.replace(/[\\W]+/g, symbol);\r\n\r\n// from https://stackoverflow.com/questions/11381673/detecting-a-mobile-browser\r\n// added safari (on mac & ios): monaco editor is broken on safari\r\nexport const isMobile = () => {\r\n  let mobile = false;\r\n  const userAgent = navigator.userAgent.toLowerCase();\r\n  (function (a) {\r\n    if (\r\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\r\n        a,\r\n      ) ||\r\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(\r\n        a.substr(0, 4),\r\n      )\r\n    ) {\r\n      mobile = true;\r\n    }\r\n  })(userAgent || navigator.vendor || (window as any).opera);\r\n\r\n  const safari = userAgent.indexOf('safari') > -1 && userAgent.indexOf('chrome') === -1; // chrome says it is safari!\r\n\r\n  return mobile || safari;\r\n};\r\n\r\nexport const isRelativeUrl = (url?: string) =>\r\n  !url?.startsWith('http') && !url?.startsWith('data:');\r\n\r\nexport const getAbsoluteUrl = (url: string, baseUrl = document.baseURI) =>\r\n  isRelativeUrl(url) ? new URL(url, baseUrl).href : url;\r\n\r\nexport const cloneObject = <T>(x: Record<string, any>): T => JSON.parse(JSON.stringify(x));\r\n\r\nexport const objectMap = (\r\n  obj: Record<string, any>,\r\n  fn: (value: any, key: string, index: number) => any,\r\n) => Object.fromEntries(Object.entries(obj).map(([k, v], i) => [k, fn(v, k, i)]));\r\n\r\nexport const objectFilter = (\r\n  obj: Record<string, any>,\r\n  predicate: (value: any, key: string, index: number) => any,\r\n) => Object.fromEntries(Object.entries(obj).filter(([k, v], i) => predicate(v, k, i)));\r\n\r\nexport const copyToClipboard = (text: string) => {\r\n  if (document.queryCommandSupported && document.queryCommandSupported('copy')) {\r\n    const textarea = document.createElement('textarea');\r\n    textarea.textContent = text;\r\n    textarea.style.position = 'fixed'; // Prevent scrolling to bottom of page in Microsoft Edge.\r\n    document.body.appendChild(textarea);\r\n    textarea.select();\r\n    try {\r\n      return document.execCommand('copy'); // Security exception may be thrown by some browsers.\r\n    } catch (ex) {\r\n      // eslint-disable-next-line no-console\r\n      console.warn('Copy to clipboard failed.', ex);\r\n      return false;\r\n    } finally {\r\n      document.body.removeChild(textarea);\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const stringToValidJson = (str: string) =>\r\n  str\r\n    .replace(/'[^'\"]*'(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/g, function replaceSingleQuotes(matchedStr) {\r\n      return '\"' + matchedStr.substring(1, matchedStr.length - 1) + '\"';\r\n    })\r\n    .replace(\r\n      /(\\w+(?=([^\"\\\\]*(\\\\.|\"([^\"\\\\]*\\\\.)*[^\"\\\\]*\"))*[^\"]*$))(\\s*:)(?!(\\w*)(?:\"))/gm,\r\n      function quoteNonQuoted(matchedStr) {\r\n        return '\"' + matchedStr.substring(0, matchedStr.length - 1).trimEnd() + '\":';\r\n      },\r\n    )\r\n    .replace(/,\\s*([\\]}])/g, '$1'); // remove trailing comma\r\n\r\nexport const stringify = (obj: any, pretty = false) => {\r\n  try {\r\n    return JSON.stringify(obj, undefined, pretty ? 2 : undefined);\r\n  } catch {\r\n    return '';\r\n  }\r\n};\r\n\r\nexport const getRandomString = () => String(Math.random()) + '-' + Date.now().toFixed();\r\n\r\nexport const downloadFile = (filename: string, extension: string, content: string) => {\r\n  const a = document.createElement('a');\r\n  a.style.display = 'none';\r\n  a.href = content;\r\n  a.download = safeName(filename) + '.' + extension;\r\n  a.click();\r\n  a.remove();\r\n};\r\n\r\nexport const loadScript = (url: string, name?: string) =>\r\n  new Promise((resolve, reject) => {\r\n    if (name && (globalThis as any)[name]) {\r\n      return resolve((globalThis as any)[name]);\r\n    }\r\n\r\n    // if running in web worker\r\n    if (typeof (globalThis as any).importScripts === 'function') {\r\n      (globalThis as any).importScripts(url);\r\n      if (name && (globalThis as any)[name]) {\r\n        return resolve((globalThis as any)[name]);\r\n      }\r\n      return resolve(globalThis);\r\n    }\r\n\r\n    const script = document.createElement('script');\r\n    script.src = url;\r\n    script.async = true;\r\n    const removeEventListeners = () => {\r\n      script.removeEventListener('load', onLoad);\r\n      script.removeEventListener('error', onError);\r\n    };\r\n    const onLoad = () => {\r\n      removeEventListeners();\r\n      if (!name) {\r\n        return resolve('loaded: ' + url);\r\n      }\r\n      const i = setInterval(() => {\r\n        if ((window as any)[name]) {\r\n          clearInterval(i);\r\n          return resolve((window as any)[name]);\r\n        }\r\n      }, 5);\r\n    };\r\n    const onError = () => {\r\n      removeEventListeners();\r\n      reject('failed to load: ' + url);\r\n    };\r\n    script.addEventListener('load', onLoad);\r\n    script.addEventListener('error', onError);\r\n    document.head.appendChild(script);\r\n  });\r\n\r\nexport const loadStylesheet = (url: string, id?: string, insertBefore?: string) => {\r\n  if (id && document.getElementById(id)) return;\r\n  const stylesheet = document.createElement('link');\r\n  stylesheet.rel = 'stylesheet';\r\n  stylesheet.href = url;\r\n  stylesheet.id = id || 'styles-' + getRandomString();\r\n  document.head.insertBefore(\r\n    stylesheet,\r\n    insertBefore ? document.querySelector(insertBefore) : null,\r\n  );\r\n};\r\n\r\nexport const typedArrayToBuffer = (array: Uint8Array): ArrayBuffer =>\r\n  array.buffer.slice(array.byteOffset, array.byteLength + array.byteOffset);\r\n\r\nexport const getDate = () => {\r\n  let date = new Date();\r\n  const offset = date.getTimezoneOffset();\r\n  date = new Date(date.getTime() - offset * 60 * 1000);\r\n  return date.toISOString().split('T')[0];\r\n};\r\n\r\nexport const handleFetchError = (res: Response) => (res.ok ? res : Promise.reject());\r\nexport const fetchWithHandler = (input: RequestInfo, init?: RequestInit) =>\r\n  fetch(input, init).then(handleFetchError);\r\n\r\nexport const blobToBase64 = (file: Blob): Promise<string> =>\r\n  new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => (typeof reader.result === 'string' ? resolve(reader.result) : reject());\r\n    reader.onerror = (error) => reject(error);\r\n  });\r\n\r\nexport const Uint8ArrayToBase64 = (u8: Uint8Array) => {\r\n  const CHUNK_SZ = 0x8000;\r\n  const c = [];\r\n  for (let i = 0; i < u8.length; i += CHUNK_SZ) {\r\n    c.push(String.fromCharCode.apply(null, (u8 as any).subarray(i, i + CHUNK_SZ)));\r\n  }\r\n  return btoa(c.join(''));\r\n};\r\n\r\nexport const base64ToUint8Array = (str: string) =>\r\n  new Uint8Array(\r\n    atob(str)\r\n      .split('')\r\n      .map((c) => c.charCodeAt(0)),\r\n  );\r\n\r\nexport const typedArraysAreEqual = (a: Uint8Array, b: Uint8Array) => {\r\n  if (a === b) {\r\n    return true;\r\n  }\r\n  if (a.byteLength !== b.byteLength) {\r\n    return false;\r\n  }\r\n  for (let i = 0; i < a.byteLength; i++) {\r\n    if (a[i] !== b[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\nexport const getWorkerDataURL = (url: string) => {\r\n  const content = `importScripts(\"${url}\");`;\r\n  return 'data:text/javascript;base64,' + btoa(content);\r\n};\r\n\r\nexport const removeComments = (src: string) =>\r\n  src.replace(/\\/\\*[\\s\\S]*?\\*\\/|([^\\\\:]|^)\\/\\/.*$/gm, '$1');\r\n\r\nexport const removeStrings = (src: string) =>\r\n  src\r\n    .replace(/'[^\\n']*'/gm, \"''\")\r\n    .replace(/\"[^\\n\"]*\"/gm, '\"\"')\r\n    .replace(/`[^`]*`/gm, '``');\r\n\r\nexport const removeCommentsAndStrings = (src: string) => removeStrings(removeComments(src));\r\n\r\nexport const getLanguageCustomSettings = (language: Language | Processor, config: Config) => ({\r\n  ...(config.customSettings as any)[language],\r\n});\r\n\r\nexport const getValidUrl = (url?: string) => {\r\n  if (!url) return null;\r\n  let validUrl = null;\r\n  if (url.startsWith('http') || url.startsWith('data:')) {\r\n    try {\r\n      validUrl = new URL(url).href;\r\n    } catch {\r\n      try {\r\n        validUrl = new URL(decodeURIComponent(url)).href;\r\n      } catch {\r\n        //\r\n      }\r\n    }\r\n  }\r\n  return validUrl;\r\n};\r\n\r\nexport const runOrContinue =\r\n  <T>(fn: (x: T) => Promise<T>, catchFn?: (err: unknown) => void) =>\r\n  async (x: T): Promise<T> => {\r\n    try {\r\n      const result = await fn(x);\r\n      return result;\r\n    } catch (error) {\r\n      if (typeof catchFn === 'function') {\r\n        catchFn(error);\r\n      }\r\n      return x;\r\n    }\r\n  };\r\n\r\nexport const getFileExtension = (file: string) => file.split('.')[file.split('.').length - 1];\r\n\r\nexport const isInIframe = () => {\r\n  try {\r\n    return window.self !== window.top;\r\n  } catch {\r\n    return true;\r\n  }\r\n};\r\n\r\nexport const indentCode = (code: string, spaces: number, skipFirstLine = true) =>\r\n  (skipFirstLine ? '' : ' '.repeat(spaces)) + code.split('\\n').join('\\n' + ' '.repeat(spaces));\r\n\r\nexport const hideOnClickOutside = (element: HTMLElement) => {\r\n  const hideElement = () => {\r\n    element.style.display = 'none';\r\n    removeListeners();\r\n    (window as any).watchingEscape = false;\r\n  };\r\n\r\n  const outsideClickListener = (event: MouseEvent) => {\r\n    if (!element.contains(event.target as Node) && isVisible(element)) {\r\n      hideElement();\r\n    }\r\n  };\r\n\r\n  const escapeListener = (event: KeyboardEvent) => {\r\n    if (event.key === 'Escape') {\r\n      hideElement();\r\n      event.preventDefault();\r\n    }\r\n  };\r\n\r\n  const isVisible = (elem: HTMLElement) =>\r\n    !!elem && !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);\r\n\r\n  const removeListeners = () => {\r\n    document.removeEventListener('click', outsideClickListener);\r\n    document.removeEventListener('keydown', escapeListener);\r\n  };\r\n\r\n  document.addEventListener('click', outsideClickListener);\r\n  document.addEventListener('keydown', escapeListener);\r\n  (window as any).watchingEscape = true;\r\n\r\n  return {\r\n    clear: () => removeListeners(),\r\n  };\r\n};\r\n\r\nexport const callWorker = async <T = string, K = unknown>(\r\n  worker: Worker,\r\n  message: { method: T; args?: any },\r\n) =>\r\n  new Promise<K>((resolve) => {\r\n    const messageId = getRandomString();\r\n\r\n    const handler = (event: WorkerMessageEvent<T, K>) => {\r\n      const received = event.data;\r\n\r\n      if (received.method === message.method && received.messageId === messageId) {\r\n        worker.removeEventListener('message', handler);\r\n        resolve(received.data as K);\r\n      }\r\n    };\r\n    worker.addEventListener('message', handler);\r\n\r\n    worker.postMessage({\r\n      ...message,\r\n      messageId,\r\n    });\r\n  });\r\n\r\nexport const toCamelCase = (str: string) =>\r\n  str\r\n    .replace(/[-_.]+/g, ' ')\r\n    .trim()\r\n    .replace(/^([A-Z])|\\s+(\\w)/g, function (_match, p1, p2) {\r\n      if (p2) return p2.toUpperCase();\r\n      return p1.toLowerCase();\r\n    });\r\n\r\nexport const removeDuplicates = (arr: any[] | undefined) => Array.from(new Set(arr));\r\n", "export const getToolbarElement = () => document.querySelector('#toolbar') as HTMLElement;\r\nexport const getProjectTitleElement = () => document.querySelector('#project-title') as HTMLElement;\r\nexport const getEditorContainerElement = () =>\r\n  document.querySelector('#editor-container') as HTMLElement;\r\nexport const getEditorsElement = () => document.querySelector('#editors') as HTMLElement;\r\nexport const getMarkupElement = () => document.querySelector('#markup') as HTMLElement;\r\nexport const getStyleElement = () => document.querySelector('#style') as HTMLElement;\r\nexport const getScriptElement = () => document.querySelector('#script') as HTMLElement;\r\nexport const getOutputElement = () => document.querySelector('#output') as HTMLElement;\r\nexport const getResultElement = () => document.querySelector('#result') as HTMLElement;\r\nexport const getResultIFrameElement = () =>\r\n  document.querySelector('#result > iframe') as HTMLIFrameElement;\r\nexport const getGutterElement = () =>\r\n  document.querySelector('#editor-container .gutter') as HTMLElement;\r\nexport const getLogoLink = () => document.querySelector('#logo a') as HTMLAnchorElement;\r\nexport const getRunButton = () => document.querySelector('#run-button') as HTMLElement;\r\nexport const getCodeRunButton = () => document.querySelector('#code-run-button') as HTMLElement;\r\nexport const getEditorToolbar = () => document.querySelector('#editor-tools') as HTMLElement;\r\nexport const getCopyButton = () => document.querySelector('#editor-tools #copy-btn') as HTMLElement;\r\nexport const getUndoButton = () => document.querySelector('#editor-tools #undo-btn') as HTMLElement;\r\nexport const getRedoButton = () => document.querySelector('#editor-tools #redo-btn') as HTMLElement;\r\nexport const getFormatButton = () =>\r\n  document.querySelector('#editor-tools #format-btn') as HTMLElement;\r\nexport const getEditorModeNode = () => document.querySelector<HTMLElement>('#editor-mode');\r\nexport const getEditorStatus = () =>\r\n  document.querySelector('#editor-tools #editor-status') as HTMLElement;\r\nexport const getExternalResourcesBtn = () =>\r\n  document.querySelector('#editor-tools #external-resources-btn') as HTMLElement;\r\nexport const getExternalResourcesMark = () =>\r\n  document.querySelector('#editor-tools #external-resources-mark') as HTMLElement;\r\nexport const getResultButton = () => document.querySelector('#result-button') as HTMLElement;\r\nexport const getFullscreenButton = () =>\r\n  document.querySelector('#fullscreen-button') as HTMLElement;\r\nexport const getEditorTitles = () =>\r\n  document.querySelectorAll<HTMLElement>('.editor-title:not(.hidden)');\r\nexport const getEditorDivs = () => document.querySelectorAll<HTMLElement>('#editors > .editor');\r\nexport const getToolspaneElement = () =>\r\n  document.querySelector('#output #tools-pane') as HTMLElement;\r\nexport const getToolspaneBar = () =>\r\n  document.querySelector('#output #tools-pane-bar') as HTMLElement;\r\nexport const getToolspaneButtons = () =>\r\n  document.querySelector('#tools-pane-buttons') as HTMLElement;\r\nexport const getToolspaneTitles = () => document.querySelector<HTMLElement>('#tools-pane-titles');\r\nexport const getToolspaneLoader = () => document.querySelector<HTMLElement>('#tools-pane-loading');\r\nexport const getZoomButtonValue = () =>\r\n  document.querySelector<HTMLElement>('#zoom-button #zoom-value');\r\nexport const getModalSaveButton = () =>\r\n  document.querySelector('#modal #prompt-save-btn') as HTMLElement;\r\nexport const getModalDoNotSaveButton = () =>\r\n  document.querySelector('#modal #prompt-donot-save-btn') as HTMLElement;\r\nexport const getModalCancelButton = () =>\r\n  document.querySelector('#modal #prompt-cancel-btn') as HTMLElement;\r\n\r\nexport const getModalRecoverButton = () =>\r\n  document.querySelector('#modal #prompt-recover-btn') as HTMLElement;\r\nexport const getModalSavePreviousButton = () =>\r\n  document.querySelector('#modal #prompt-save-previous-btn') as HTMLElement;\r\nexport const getModalCancelRecoverButton = () =>\r\n  document.querySelector('#modal #prompt-cancel-recover-btn') as HTMLElement;\r\nexport const getModalUnsavedName = () =>\r\n  document.querySelector('#modal #unsaved-project-name') as HTMLElement;\r\nexport const getModalUnsavedLastModified = () =>\r\n  document.querySelector('#modal #unsaved-project-last-modified') as HTMLElement;\r\nexport const getModalDisableRecoverCheckbox = () =>\r\n  document.querySelector('#modal #disable-recover-checkbox') as HTMLInputElement;\r\n\r\nexport const getLanguageMenuLinks = () =>\r\n  document.querySelectorAll<HTMLElement>('#select-editor .language-item a');\r\n\r\nexport const getLanguageMenuButtons = () =>\r\n  document.querySelectorAll<HTMLElement>('#select-editor .language-menu-button');\r\n\r\nexport const getstyleMenu = () =>\r\n  document.querySelector<HTMLElement>('#style-selector .dropdown-menu');\r\n\r\nexport const getSettingToggles = () =>\r\n  document.querySelectorAll<HTMLInputElement>('#settings-menu input');\r\n\r\nexport const getCssPresetLinks = () =>\r\n  document.querySelectorAll<HTMLAnchorElement>('#css-preset-menu a');\r\n\r\nexport const getSettingsMenuScroller = () =>\r\n  document.querySelector<HTMLElement>('#settings-menu-container');\r\nexport const getSettingsButton = () => document.querySelector<HTMLElement>('#settings-button');\r\n\r\nexport const getExportJSONLink = () =>\r\n  document.querySelector<HTMLAnchorElement>('#export-menu #export-json');\r\n\r\nexport const getExportResultLink = () =>\r\n  document.querySelector<HTMLAnchorElement>('#export-menu #export-result');\r\n\r\nexport const getExportSourceLink = () =>\r\n  document.querySelector<HTMLAnchorElement>('#export-menu #export-src');\r\n\r\nexport const getExportGithubGistLink = () =>\r\n  document.querySelector<HTMLAnchorElement>('#export-menu #export-githubGist');\r\n\r\nexport const getExportCodepenLink = () =>\r\n  document.querySelector<HTMLAnchorElement>('#export-menu #export-codepen');\r\n\r\nexport const getExportJsfiddleLink = () =>\r\n  document.querySelector<HTMLAnchorElement>('#export-menu #export-jsfiddle');\r\n\r\nexport const getLoginLink = () => document.querySelector<HTMLAnchorElement>('#login-link');\r\n\r\nexport const getLogoutLink = () => document.querySelector<HTMLAnchorElement>('#logout-link');\r\n\r\nexport const getNewLink = () => document.querySelector<HTMLAnchorElement>('#new-link');\r\n\r\nexport const getOpenLink = () => document.querySelector<HTMLAnchorElement>('#open-link');\r\n\r\nexport const getSaveLink = () => document.querySelector<HTMLAnchorElement>('#save-link');\r\n\r\nexport const getForkLink = () => document.querySelector<HTMLAnchorElement>('#fork-link');\r\n\r\nexport const getSaveAsTemplateLink = () =>\r\n  document.querySelector<HTMLAnchorElement>('#template-link');\r\n\r\nexport const getExternalResourcesLink = () =>\r\n  document.querySelector<HTMLAnchorElement>('#external-resources-link');\r\n\r\nexport const getCustomSettingsLink = () =>\r\n  document.querySelector<HTMLAnchorElement>('#custom-settings-link');\r\n\r\nexport const getShareLink = () => document.querySelector<HTMLAnchorElement>('#share-link');\r\n\r\nexport const getEmbedLink = () => document.querySelector<HTMLAnchorElement>('#embed-link');\r\n\r\nexport const getEditorSettingsLink = () =>\r\n  document.querySelector<HTMLAnchorElement>('#editor-settings-link');\r\n\r\nexport const getDeployLink = () => document.querySelector<HTMLAnchorElement>('#deploy-link');\r\n\r\nexport const getSyncLink = () => document.querySelector<HTMLAnchorElement>('#sync-link');\r\n\r\nexport const getSyncIndicator = () => document.querySelector<HTMLAnchorElement>('#sync-indicator');\r\n\r\nexport const getImportLink = () => document.querySelector<HTMLAnchorElement>('#import-link');\r\n\r\nexport const getBackupLink = () => document.querySelector<HTMLAnchorElement>('#backup-link');\r\n\r\nexport const getBroadcastLink = () => document.querySelector<HTMLAnchorElement>('#broadcast-link');\r\n\r\nexport const getWelcomeLink = () => document.querySelector<HTMLAnchorElement>('#welcome-link');\r\n\r\nexport const getAboutLink = () => document.querySelector<HTMLAnchorElement>('#about-link');\r\n\r\nexport const getAutoupdateToggle = () =>\r\n  document.querySelector('#settings-menu input#autoupdate') as HTMLInputElement;\r\n\r\nexport const getDelayValue = () =>\r\n  document.querySelector('#settings-menu #delay-value') as HTMLElement;\r\n\r\nexport const getDelayRange = () =>\r\n  document.querySelector('#settings-menu input#delay-range') as HTMLInputElement;\r\n\r\nexport const getAutosaveToggle = () =>\r\n  document.querySelector('#settings-menu input#autosave') as HTMLInputElement;\r\n\r\nexport const getAutosyncToggle = () =>\r\n  document.querySelector('#settings-menu input#autosync') as HTMLInputElement;\r\n\r\nexport const getFormatOnsaveToggle = () =>\r\n  document.querySelector('#settings-menu input#formatOnsave') as HTMLInputElement;\r\n\r\nexport const getProcessorToggles = () =>\r\n  document.querySelectorAll<HTMLInputElement>('#style-selector input');\r\n\r\nexport const getEmmetToggle = () =>\r\n  document.querySelector('#settings-menu input#emmet') as HTMLInputElement;\r\n\r\nexport const getThemeToggle = () =>\r\n  document.querySelector('#settings-menu input#theme') as HTMLInputElement;\r\n\r\nexport const getShowWelcomeToggle = () =>\r\n  document.querySelector('#settings-menu input#welcome') as HTMLInputElement;\r\n\r\nexport const getRecoverToggle = () =>\r\n  document.querySelector('#settings-menu input#recover-unsaved') as HTMLInputElement;\r\n\r\nexport const getSpacingToggle = () =>\r\n  document.querySelector('#settings-menu input#show-spacing') as HTMLInputElement;\r\n\r\nexport const getCSSPresetLinks = () =>\r\n  document.querySelectorAll<HTMLAnchorElement>('#css-preset-menu a');\r\n\r\nexport const getProjectInfoLink = () =>\r\n  document.querySelector('#settings-menu #info-link') as HTMLInputElement;\r\n\r\nexport const getAssetsLink = () =>\r\n  document.querySelector('#settings-menu #assets-link') as HTMLInputElement;\r\n\r\nexport const getSnippetsLink = () =>\r\n  document.querySelector('#settings-menu #snippets-link') as HTMLInputElement;\r\n\r\nexport const getInfoTitleInput = () =>\r\n  document.querySelector('#info-container input#title-input') as HTMLInputElement;\r\n\r\nexport const getInfoDescription = () =>\r\n  document.querySelector('#info-container #description-textarea') as HTMLTextAreaElement;\r\n\r\nexport const getInfoTagsInput = () =>\r\n  document.querySelector('#info-container input#tags-input') as HTMLInputElement;\r\n\r\nexport const getSaveInfoButton = () =>\r\n  document.querySelector<HTMLElement>('#info-container #info-save-btn');\r\n\r\nexport const getExternalResourcesTextareas = () =>\r\n  document.querySelectorAll<HTMLTextAreaElement>('#resources-container textarea');\r\n\r\nexport const getExternalResourcesCssPresetInputs = () =>\r\n  document.querySelectorAll<HTMLInputElement>('#resources-container input[type=\"radio\"]');\r\n\r\nexport const getLoadResourcesButton = () =>\r\n  document.querySelector<HTMLElement>('#resources-container #resources-load-btn');\r\n\r\nexport const getCustomSettingsEditor = () =>\r\n  document.querySelector<HTMLElement>('#custom-settings-container #custom-settings-editor');\r\n\r\nexport const getLoadCustomSettingsButton = () =>\r\n  document.querySelector<HTMLElement>('#custom-settings-container #custom-settings-load-btn');\r\n\r\nexport const getTestEditor = () =>\r\n  document.querySelector<HTMLElement>('#test-editor-container #test-editor');\r\n\r\nexport const getLoadTestsButton = () =>\r\n  document.querySelector<HTMLElement>('#test-editor-container #test-load-btn');\r\n\r\nexport const getEditTestsButton = () =>\r\n  document.querySelector<HTMLElement>('#test-container #edit-tests-btn');\r\n\r\nexport const getRunTestsButton = () =>\r\n  document.querySelector<HTMLElement>('#test-container #run-tests-btn');\r\n\r\nexport const getWatchTestsButton = () =>\r\n  document.querySelector<HTMLElement>('#test-container #watch-tests-btn');\r\n\r\nexport const getUrlImportForm = (importContainer: HTMLElement) =>\r\n  importContainer.querySelector<HTMLFormElement>('#url-import-form');\r\nexport const getUrlImportButton = (importContainer: HTMLElement) =>\r\n  importContainer.querySelector('#url-import-btn') as HTMLButtonElement;\r\nexport const getUrlImportInput = (importContainer: HTMLElement) =>\r\n  importContainer.querySelector('#code-url') as HTMLInputElement;\r\nexport const getCodeImportInput = (importContainer: HTMLElement) =>\r\n  importContainer.querySelector('#local-code-input') as HTMLInputElement;\r\n\r\nexport const getImportJsonUrlForm = (importContainer: HTMLElement) =>\r\n  importContainer.querySelector('#json-url-import-form') as HTMLInputElement;\r\nexport const getImportJsonUrlButton = (importContainer: HTMLElement) =>\r\n  importContainer.querySelector('#json-url-import-btn') as HTMLInputElement;\r\nexport const getImportJsonUrlInput = (importContainer: HTMLElement) =>\r\n  importContainer.querySelector('#json-url') as HTMLInputElement;\r\n\r\nexport const getBulkImportJsonUrlForm = (importContainer: HTMLElement) =>\r\n  importContainer.querySelector('#bulk-json-url-import-form') as HTMLInputElement;\r\nexport const getBulkImportJsonUrlButton = (importContainer: HTMLElement) =>\r\n  importContainer.querySelector('#bulk-json-url-import-btn') as HTMLInputElement;\r\nexport const getBulkImportJsonUrlInput = (importContainer: HTMLElement) =>\r\n  importContainer.querySelector('#bulk-json-url') as HTMLInputElement;\r\nexport const getLinkToSavedProjects = (importContainer: HTMLElement) =>\r\n  importContainer.querySelector('#link-to-saved-projects') as HTMLAnchorElement;\r\n\r\nexport const getImportFileInput = (importContainer: HTMLElement) =>\r\n  importContainer.querySelector('#file-input') as HTMLInputElement;\r\n\r\nexport const getImportFileInputLabel = (importContainer: HTMLElement) =>\r\n  importContainer.querySelector('.file-input-label') as HTMLInputElement;\r\n\r\nexport const getBulkImportFileInput = (importContainer: HTMLElement) =>\r\n  importContainer.querySelector('#bulk-file-input') as HTMLInputElement;\r\n\r\nexport const getNewRepoForm = (deployContainer: HTMLElement) =>\r\n  deployContainer.querySelector<HTMLFormElement>('#new-repo-form');\r\nexport const getNewRepoButton = (deployContainer: HTMLElement) =>\r\n  deployContainer.querySelector('#new-repo-btn') as HTMLButtonElement;\r\nexport const getNewRepoNameInput = (deployContainer: HTMLElement) =>\r\n  deployContainer.querySelector('#new-repo-name') as HTMLInputElement;\r\nexport const getNewRepoNameError = (deployContainer: HTMLElement) =>\r\n  deployContainer.querySelector('#new-repo-name-error') as HTMLElement;\r\nexport const getNewRepoMessageInput = (deployContainer: HTMLElement) =>\r\n  deployContainer.querySelector('#new-repo-message') as HTMLInputElement;\r\nexport const getNewRepoCommitSource = (deployContainer: HTMLElement) =>\r\n  deployContainer.querySelector('#new-repo-source') as HTMLInputElement;\r\nexport const getNewRepoAutoSync = (deployContainer: HTMLElement) =>\r\n  deployContainer.querySelector('#new-repo-autosync') as HTMLInputElement;\r\n\r\nexport const getExistingRepoForm = (deployContainer: HTMLElement) =>\r\n  deployContainer.querySelector<HTMLFormElement>('#existing-repo-form');\r\nexport const getExistingRepoButton = (deployContainer: HTMLElement) =>\r\n  deployContainer.querySelector('#existing-repo-btn') as HTMLButtonElement;\r\nexport const getExistingRepoNameInput = (deployContainer: HTMLElement) =>\r\n  deployContainer.querySelector('#existing-repo-name') as HTMLInputElement;\r\nexport const getExistingRepoMessageInput = (deployContainer: HTMLElement) =>\r\n  deployContainer.querySelector('#existing-repo-message') as HTMLInputElement;\r\nexport const getExistingRepoCommitSource = (deployContainer: HTMLElement) =>\r\n  deployContainer.querySelector('#existing-repo-source') as HTMLInputElement;\r\nexport const getExistingRepoAutoSync = (deployContainer: HTMLElement) =>\r\n  deployContainer.querySelector('#existing-repo-autosync') as HTMLInputElement;\r\n\r\nexport const getStarterTemplatesTab = (templatesContainer: HTMLElement) =>\r\n  templatesContainer.querySelector<HTMLElement>(\r\n    '#templates-tabs [data-target=\"templates-starter\"]',\r\n  );\r\nexport const getStarterTemplatesList = (templatesContainer: HTMLElement) =>\r\n  templatesContainer.querySelector<HTMLElement>('#starter-templates-list');\r\nexport const getUserTemplatesScreen = (templatesContainer: HTMLElement) =>\r\n  templatesContainer.querySelector('#templates-user .modal-screen') as HTMLElement;\r\n\r\nexport const getBulkImportButton = (listContainer: HTMLElement) =>\r\n  listContainer.querySelector('#bulk-import-button') as HTMLElement;\r\n\r\nexport const getExportAllButton = (listContainer: HTMLElement) =>\r\n  listContainer.querySelector('#export-all-button') as HTMLElement;\r\n\r\nexport const getDeleteAllButton = (listContainer: HTMLElement) =>\r\n  listContainer.querySelector('#delete-all-button') as HTMLElement;\r\n\r\nexport const getAddAssetButton = (listContainer: HTMLElement) =>\r\n  listContainer.querySelector('#assets-add-asset-button') as HTMLElement;\r\n\r\nexport const getAssetsDeleteAllButton = (listContainer: HTMLElement) =>\r\n  listContainer.querySelector('#assets-delete-all-button') as HTMLElement;\r\n\r\nexport const getAssetsButton = (listContainer: HTMLElement) =>\r\n  listContainer.querySelector('#assets-button') as HTMLElement;\r\n\r\nexport const getAssetDataUrlFileInput = (listContainer: HTMLElement) =>\r\n  listContainer.querySelector('#asset-data-url-file-input') as HTMLInputElement;\r\n\r\nexport const getAssetDataUrlOutput = (listContainer: HTMLElement) =>\r\n  listContainer.querySelector('#data-url-output') as HTMLElement;\r\n\r\nexport const getAssetGHPagesFileInput = (listContainer: HTMLElement) =>\r\n  listContainer.querySelector('#asset-gh-pages-file-input') as HTMLInputElement;\r\n\r\nexport const getAssetGHPagesFileInputLabel = (listContainer: HTMLElement) =>\r\n  listContainer.querySelector('#asset-gh-pages-file-input-label') as HTMLElement;\r\n\r\nexport const getAssetGHPagesFileInputButton = (listContainer: HTMLElement) =>\r\n  listContainer.querySelector('#asset-gh-pages-file-input-button') as HTMLElement;\r\n\r\nexport const getAssetGHPagesOutput = (listContainer: HTMLElement) =>\r\n  listContainer.querySelector('#gh-pages-output') as HTMLElement;\r\n\r\nexport const getSyncStatus = (syncContainer: HTMLElement | undefined) =>\r\n  (syncContainer || document).querySelector<HTMLElement>('#sync-status');\r\n\r\nexport const getStartSyncBtns = (syncContainer: HTMLElement | undefined) =>\r\n  (syncContainer || document).querySelectorAll<HTMLButtonElement>('.start-sync-btn');\r\n\r\nexport const getBackupForm = (backupContainer: HTMLElement) =>\r\n  backupContainer.querySelector('#backup-form') as HTMLFormElement;\r\n\r\nexport const getBackupBtn = (backupContainer: HTMLElement) =>\r\n  backupContainer.querySelector('#backup-btn') as HTMLButtonElement;\r\n\r\nexport const getBackupCheckedInputs = (backupContainer: HTMLElement) =>\r\n  backupContainer.querySelectorAll<HTMLInputElement>('#backup input[type=\"checkbox\"]:checked');\r\n\r\nexport const getAddSnippetButton = (snippetsContainer: HTMLElement) =>\r\n  snippetsContainer.querySelector('#snippets-add-snippet-button') as HTMLElement;\r\n\r\nexport const getSnippetsDeleteAllButton = (snippetsContainer: HTMLElement) =>\r\n  snippetsContainer.querySelector('#snippets-delete-all-button') as HTMLElement;\r\n\r\nexport const getSnippetLanguageSelect = (snippetsContainer: HTMLElement) =>\r\n  snippetsContainer.querySelector('#language-select') as HTMLSelectElement;\r\n\r\nexport const getAddSnippetEditor = (snippetsContainer: HTMLElement) =>\r\n  snippetsContainer.querySelector('#add-snippet-editor') as HTMLElement;\r\n\r\nexport const getSnippetTitleInput = (snippetsContainer: HTMLElement) =>\r\n  snippetsContainer.querySelector('#add-snippet-title-input') as HTMLInputElement;\r\n\r\nexport const getSnippetDescriptionArea = (snippetsContainer: HTMLElement) =>\r\n  snippetsContainer.querySelector('#add-snippet-description-textarea') as HTMLTextAreaElement;\r\n\r\nexport const getSaveSnippetBtn = (snippetsContainer: HTMLElement) =>\r\n  snippetsContainer.querySelector('#add-snippet-save-btn') as HTMLButtonElement;\r\n\r\nexport const getSnippetsBtn = (snippetsContainer: HTMLElement) =>\r\n  snippetsContainer.querySelector('#snippets-button') as HTMLButtonElement;\r\n\r\nexport const getBroadcastStatusLabel = (broadcastContainer: HTMLElement) =>\r\n  broadcastContainer.querySelector('#broadcast-status') as HTMLElement;\r\n\r\nexport const getBroadcastForm = (broadcastContainer: HTMLElement) =>\r\n  broadcastContainer.querySelector('#broadcast-form') as HTMLFormElement;\r\n\r\nexport const getBroadcastServerUrlInput = (broadcastContainer: HTMLElement) =>\r\n  broadcastContainer.querySelector('#broadcast-server-url') as HTMLInputElement;\r\n\r\nexport const getBroadcastSourceCheckbox = (broadcastContainer: HTMLElement) =>\r\n  broadcastContainer.querySelector('#broadcast-source') as HTMLInputElement;\r\n\r\nexport const getBroadcastBtn = (broadcastContainer: HTMLElement) =>\r\n  broadcastContainer.querySelector('#broadcast-btn') as HTMLButtonElement;\r\n\r\nexport const getBroadcastChannelUrlSection = (broadcastContainer: HTMLElement) =>\r\n  broadcastContainer.querySelector('#broadcast-channel-url-section') as HTMLElement;\r\n\r\nexport const getBroadcastChannelUrl = (broadcastContainer: HTMLElement) =>\r\n  broadcastContainer.querySelector('#broadcast-channel-url') as HTMLAnchorElement;\r\n\r\nexport const getBroadcastStatusBtn = () =>\r\n  document.querySelector('#broadcast-status-btn') as HTMLElement | null;\r\n\r\nexport const getQrCodeContainer = () => document.querySelector('#qrcode-container') as HTMLElement;\r\n\r\nexport const getEditorSettingsFormatLink = (editorSettingsContainer: HTMLElement) =>\r\n  editorSettingsContainer.querySelector('#editor-settings-format-link') as HTMLAnchorElement;\r\n\r\nexport const getWelcomeLinkNew = (welcomeContainer: HTMLElement) =>\r\n  welcomeContainer.querySelector('#welcome-link-new') as HTMLAnchorElement;\r\n\r\nexport const getWelcomeLinkOpen = (welcomeContainer: HTMLElement) =>\r\n  welcomeContainer.querySelector('#welcome-link-open') as HTMLAnchorElement;\r\n\r\nexport const getWelcomeLinkImport = (welcomeContainer: HTMLElement) =>\r\n  welcomeContainer.querySelector('#welcome-link-import') as HTMLAnchorElement;\r\n\r\nexport const getWelcomeLinkDefaultTemplateLi = (welcomeContainer: HTMLElement) =>\r\n  welcomeContainer.querySelector('.default-template-li') as HTMLAnchorElement;\r\n\r\nexport const getWelcomeLinkNoDefaultTemplate = (welcomeContainer: HTMLElement) =>\r\n  welcomeContainer.querySelector('#no-default-template') as HTMLAnchorElement;\r\n\r\nexport const getWelcomeLinkLoadDefault = (welcomeContainer: HTMLElement) =>\r\n  welcomeContainer.querySelector('#welcome-link-load-default') as HTMLAnchorElement;\r\n\r\nexport const getWelcomeLinkRecentOpen = (welcomeContainer: HTMLElement) =>\r\n  welcomeContainer.querySelector('#welcome-link-recent-open') as HTMLAnchorElement;\r\n\r\nexport const getWelcomeLinkTemplates = (welcomeContainer: HTMLElement) =>\r\n  welcomeContainer.querySelector('#welcome-link-templates') as HTMLAnchorElement;\r\n\r\nexport const getModalShowWelcomeCheckbox = (welcomeContainer: HTMLElement) =>\r\n  welcomeContainer.querySelector('#modal #show-welcome-checkbox') as HTMLInputElement;\r\n\r\nexport const getModalWelcomeRecover = (welcomeContainer = document) =>\r\n  welcomeContainer.querySelector('#modal #welcome-recover') as HTMLElement;\r\n\r\nexport const getModalWelcomeScreen = (welcomeContainer: HTMLElement) =>\r\n  welcomeContainer.querySelector('#welcome-screen-container .modal-screen') as HTMLElement;\r\n\r\nexport const getModalWelcomeRecent = (welcomeContainer: HTMLElement) =>\r\n  welcomeContainer.querySelector('#modal #welcome-recent') as HTMLElement;\r\n\r\nexport const getModalWelcomeRecentList = (welcomeContainer: HTMLElement) =>\r\n  welcomeContainer.querySelector('#modal #welcome-recent-list') as HTMLElement;\r\n\r\nexport const getModalWelcomeTemplateList = (welcomeContainer: HTMLElement) =>\r\n  welcomeContainer.querySelector('#modal #welcome-template-list') as HTMLElement;\r\n", "/* eslint-disable import/no-internal-modules */\nimport type { createEventsManager } from '../events/events';\nimport type { createModal } from '../modal';\nimport type { Config, CssPresetId, PkgInfo } from '../models';\nimport { resourcesScreen } from '../html';\nimport { pkgInfoService } from '../services/pkgInfo';\nimport { debounce, hideOnClickOutside } from '../utils/utils';\nimport {\n  getExternalResourcesCssPresetInputs,\n  getExternalResourcesTextareas,\n  getLoadResourcesButton,\n} from './selectors';\n\ninterface PkgInfoWithDefaultFiles extends PkgInfo {\n  files: {\n    css?: string;\n    js?: string;\n  };\n}\n\ntype ResourceType = 'stylesheets' | 'scripts';\n\nexport const createExternalResourcesUI = ({\n  baseUrl,\n  modal,\n  eventsManager,\n  deps,\n}: {\n  baseUrl: string;\n  modal: ReturnType<typeof createModal>;\n  eventsManager: ReturnType<typeof createEventsManager>;\n  deps: {\n    getConfig: () => Config;\n    setConfig: (config: Config) => void;\n    loadResources: () => Promise<void>;\n  };\n}) => {\n  const div = document.createElement('div');\n  div.innerHTML = resourcesScreen;\n  const resourcesContainer = div.firstChild as HTMLElement;\n  modal.show(resourcesContainer);\n\n  const externalResources = getExternalResourcesTextareas();\n  externalResources.forEach((textarea) => {\n    const resourceContent = deps.getConfig()[textarea.dataset.resource as ResourceType];\n    textarea.value = resourceContent.length !== 0 ? resourceContent.join('\\n') + '\\n' : '';\n  });\n\n  const cssPresetInputs = getExternalResourcesCssPresetInputs();\n  cssPresetInputs.forEach((input) => {\n    const cssPreset = deps.getConfig().cssPreset;\n    if (cssPreset === input.value) {\n      input.checked = true;\n    }\n  });\n\n  const searchInput = document.querySelector<HTMLInputElement>(\n    '#resources-container #resources-search-input',\n  )!;\n  const resultContainer = document.querySelector<HTMLElement>(\n    '#resources-container #resources-result-container',\n  )!;\n  const searchResultsEl = document.querySelector<HTMLElement>(\n    '#resources-container #resources-search-results',\n  )!;\n  const fontsSelect = document.querySelector<HTMLSelectElement>(\n    '#resources-container #fonts-container select',\n  )!;\n  const addFontsBtn = document.querySelector<HTMLElement>(\n    '#resources-container #fonts-container button',\n  )!;\n\n  const addResource = (url: string, type: ResourceType) => {\n    if (!url || isAdded(url, type)) return;\n    const textarea = type === 'stylesheets' ? externalResources[0] : externalResources[1];\n    textarea.value =\n      textarea.value.trim() === ''\n        ? url.trim() + '\\n'\n        : textarea.value\n            .split('\\n')\n            .map((x) => x.trim())\n            .filter((x) => x !== '')\n            .join('\\n') +\n          '\\n' +\n          url.trim() +\n          '\\n';\n    document\n      .querySelector(`#resources-search-results a.add-resource[data-resource-url=\"${url}\"]`)\n      ?.classList.add('resource-added');\n  };\n\n  const isAdded = (url: string, type: ResourceType) => {\n    if (!url) return false;\n    const textarea = type === 'stylesheets' ? externalResources[0] : externalResources[1];\n    return Boolean(\n      textarea.value\n        .split('\\n')\n        .map((x) => x.trim())\n        .find((x) => x === url.trim()),\n    );\n  };\n\n  const getResultItem = ({\n    name,\n    version,\n    description,\n    files,\n  }: PkgInfo & { files: { css?: string; js?: string } }) => {\n    const li = document.createElement('li');\n\n    const itemTitle = document.createElement('div');\n    itemTitle.classList.add('search-result-item-title');\n    itemTitle.textContent = name;\n    li.appendChild(itemTitle);\n\n    const itemVersion = document.createElement('span');\n    itemVersion.classList.add('label-description');\n    itemVersion.textContent = 'v' + version;\n    itemTitle.appendChild(itemVersion);\n\n    const itemDescription = document.createElement('div');\n    itemDescription.classList.add('search-result-item-description');\n    itemDescription.textContent = description || '';\n    li.appendChild(itemDescription);\n\n    const itemFiles = document.createElement('div');\n    itemFiles.classList.add('search-result-item-files');\n    li.appendChild(itemFiles);\n\n    const itemScript = document.createElement('span');\n    itemScript.classList.add('search-result-item-script');\n    itemFiles.appendChild(itemScript);\n\n    if (files?.js) {\n      const scriptAdded = isAdded(files.js, 'scripts');\n      const itemScriptLink = document.createElement('a');\n      itemScriptLink.classList.add('add-resource');\n      itemScriptLink.classList.toggle('resource-added', scriptAdded);\n      itemScriptLink.href = '#';\n      itemScriptLink.onclick = scriptAdded ? null : () => addResource(files.js || '', 'scripts');\n      itemScriptLink.title = files.js;\n      itemScriptLink.dataset.resourceUrl = files.js;\n      itemScriptLink.innerHTML = `<img src=\"${baseUrl}assets/images/javascript.svg\" />`;\n      itemScript.appendChild(itemScriptLink);\n    }\n\n    const itemStylesheet = document.createElement('span');\n    itemStylesheet.classList.add('search-result-item-stylesheet');\n    itemFiles.appendChild(itemStylesheet);\n\n    if (files?.css) {\n      const stylesheetAdded = isAdded(files.css, 'stylesheets');\n      const itemStylesheetLink = document.createElement('a');\n      itemStylesheetLink.classList.add('add-resource');\n      itemStylesheetLink.classList.toggle('resource-added', stylesheetAdded);\n      itemStylesheetLink.href = '#';\n      itemStylesheetLink.onclick = stylesheetAdded\n        ? null\n        : () => addResource(files.css || '', 'stylesheets');\n      itemStylesheetLink.title = files.css;\n      itemStylesheetLink.dataset.resourceUrl = files.css;\n      itemStylesheetLink.innerHTML = `<img src=\"${baseUrl}assets/images/css.svg\" />`;\n      itemStylesheet.appendChild(itemStylesheetLink);\n    }\n\n    const itemBrowse = document.createElement('span');\n    itemBrowse.classList.add('search-result-item-Browse');\n    itemFiles.appendChild(itemBrowse);\n\n    const itemBrowseLink = document.createElement('a');\n    itemBrowseLink.href = `https://cdn.jsdelivr.net/npm/${name}/`;\n    itemBrowseLink.target = '_blank';\n    itemBrowseLink.title = 'Browse package files on jsDelivr';\n    itemBrowseLink.textContent = 'Browse';\n    itemBrowse.appendChild(itemBrowseLink);\n\n    return li;\n  };\n\n  const search = async () => {\n    const query = searchInput.value;\n    const searchResults = await pkgInfoService.search(searchInput.value, 5);\n\n    if (query !== searchInput.value) {\n      searchResultsEl.innerHTML =\n        '<li><div class=\"search-result-item-description\">Loading...</div></li>';\n      return;\n    }\n\n    if ('error' in searchResults) {\n      searchResultsEl.innerHTML =\n        '<li><div class=\"search-result-item-error\">Failed to load results!</div></li>';\n      return;\n    }\n\n    if (searchResults.length === 0) {\n      searchResultsEl.innerHTML = `<li><div class=\"search-result-item-description\">No results found for: <strong>${query}</strong></div></li>`;\n      return;\n    }\n\n    const resultsWithFiles = (\n      await Promise.all(\n        searchResults.map(async (info) => {\n          const pkgName = info.version != null ? `${info.name}@${info.version}` : info.name;\n          const files = await pkgInfoService.getPkgDefaultFiles(pkgName);\n          if ('error' in files) return;\n          return {\n            ...info,\n            files,\n          };\n        }),\n      )\n    ).filter(Boolean) as PkgInfoWithDefaultFiles[];\n\n    if (query !== searchInput.value) return;\n\n    if (resultsWithFiles.length === 0) {\n      searchResultsEl.innerHTML =\n        '<li><div class=\"search-result-item-error\">Failed to load results!</div></li>';\n      return;\n    }\n\n    searchResultsEl.innerHTML = '';\n    resultsWithFiles.forEach((item) => searchResultsEl.appendChild(getResultItem(item)));\n  };\n\n  let menuEvents: ReturnType<typeof hideOnClickOutside> | undefined;\n\n  searchInput?.focus();\n  searchInput.addEventListener('input', async () => {\n    searchResultsEl.innerHTML =\n      '<li><div class=\"search-result-item-description\">Loading...</div></li>';\n\n    menuEvents?.clear();\n    if (searchInput.value.length > 0) {\n      resultContainer.style.display = 'unset';\n      menuEvents = hideOnClickOutside(resultContainer);\n    } else {\n      resultContainer.style.display = 'none';\n      return;\n    }\n\n    debounce(search, 300)();\n  });\n\n  const fontsModule: Promise<typeof import('../services/google-fonts')> = import(\n    baseUrl + '{{hash:google-fonts.js}}'\n  );\n  fontsModule.then((mod) => {\n    fontsSelect.innerHTML = '<option value=\"\">Select font ...</option>';\n    const fonts = mod.googleFonts.getFonts();\n    fonts.forEach((font) => {\n      const option = document.createElement('option');\n      option.innerText = font;\n      fontsSelect.appendChild(option);\n    });\n\n    eventsManager.addEventListener(addFontsBtn, 'click', () => {\n      if (fontsSelect.value === '') return;\n      addResource(mod.googleFonts.getStylesheetUrl(fontsSelect.value), 'stylesheets');\n      fontsSelect.value = '';\n      addFontsBtn.innerText = '\u2714';\n      setTimeout(() => {\n        addFontsBtn.innerText = 'Add';\n      }, 1000);\n    });\n  });\n\n  eventsManager.addEventListener(getLoadResourcesButton(), 'click', async () => {\n    externalResources.forEach((textarea) => {\n      const resource = textarea.dataset.resource as ResourceType;\n      deps.setConfig({\n        ...deps.getConfig(),\n        [resource]:\n          textarea.value\n            ?.split('\\n')\n            .map((x) => x.trim())\n            .filter((x) => x !== '') || [],\n      });\n    });\n\n    cssPresetInputs.forEach((input) => {\n      if (input.checked) {\n        deps.setConfig({\n          ...deps.getConfig(),\n          cssPreset: input.value as CssPresetId,\n        });\n      }\n    });\n\n    deps.loadResources();\n  });\n};\n"],
  "mappings": "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",
  "names": ["replaceValues", "str", "resourcesScreen", "replaceValues", "external_resources_default", "getSearchApiUrl", "query", "algoliaHeaders", "attributesToRetrieve", "apiEndpoint", "jsDelivrHeaders", "splitNameVersion", "nameVersion", "scoped", "str", "name", "version", "search", "limit", "options", "exactVersion", "versioned", "addPkgVersion", "data", "res", "err", "results", "pkg", "a", "b", "pkgName", "url", "getPkgInfo", "getPkgFiles", "pkgNameVersion", "basePath", "f", "getPkgDefaultFiles", "pkgInfoService", "debounce", "fn", "delay", "timeout", "args", "hideOnClickOutside", "element", "hideElement", "removeListeners", "outsideClickListener", "event", "isVisible", "escapeListener", "elem", "getExternalResourcesTextareas", "getExternalResourcesCssPresetInputs", "getLoadResourcesButton", "createExternalResourcesUI", "baseUrl", "modal", "eventsManager", "deps", "div", "resourcesScreen", "resourcesContainer", "externalResources", "getExternalResourcesTextareas", "textarea", "resourceContent", "cssPresetInputs", "getExternalResourcesCssPresetInputs", "input", "searchInput", "resultContainer", "searchResultsEl", "fontsSelect", "addFontsBtn", "addResource", "url", "type", "isAdded", "x", "getResultItem", "name", "version", "description", "files", "li", "itemTitle", "itemVersion", "itemDescription", "itemFiles", "itemScript", "scriptAdded", "itemScriptLink", "itemStylesheet", "stylesheetAdded", "itemStylesheetLink", "itemBrowse", "itemBrowseLink", "search", "query", "searchResults", "pkgInfoService", "resultsWithFiles", "info", "pkgName", "item", "menuEvents", "hideOnClickOutside", "debounce", "mod", "font", "option", "getLoadResourcesButton", "resource"]
}
