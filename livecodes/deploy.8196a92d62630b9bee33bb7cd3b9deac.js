var Te=Object.create;var $=Object.defineProperty;var ve=Object.getOwnPropertyDescriptor;var Me=Object.getOwnPropertyNames;var He=Object.getPrototypeOf,ke=Object.prototype.hasOwnProperty;var Ue=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var je=(e,t,n,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let m of Me(t))!ke.call(e,m)&&m!==n&&$(e,m,{get:()=>t[m],enumerable:!(s=ve(t,m))||s.enumerable});return e};var qe=(e,t,n)=>(n=e!=null?Te(He(e)):{},je(t||!e||!e.__esModule?$(n,"default",{value:e,enumerable:!0}):n,e));var X=Ue((Nt,j)=>{var Y=function(){var e=String.fromCharCode,t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$",s={};function m(o,r){if(!s[o]){s[o]={};for(var p=0;p<o.length;p++)s[o][o.charAt(p)]=p}return s[o][r]}var i={compressToBase64:function(o){if(o==null)return"";var r=i._compress(o,6,function(p){return t.charAt(p)});switch(r.length%4){default:case 0:return r;case 1:return r+"===";case 2:return r+"==";case 3:return r+"="}},decompressFromBase64:function(o){return o==null?"":o==""?null:i._decompress(o.length,32,function(r){return m(t,o.charAt(r))})},compressToUTF16:function(o){return o==null?"":i._compress(o,15,function(r){return e(r+32)})+" "},decompressFromUTF16:function(o){return o==null?"":o==""?null:i._decompress(o.length,16384,function(r){return o.charCodeAt(r)-32})},compressToUint8Array:function(o){for(var r=i.compress(o),p=new Uint8Array(r.length*2),l=0,u=r.length;l<u;l++){var f=r.charCodeAt(l);p[l*2]=f>>>8,p[l*2+1]=f%256}return p},decompressFromUint8Array:function(o){if(o==null)return i.decompress(o);for(var r=new Array(o.length/2),p=0,l=r.length;p<l;p++)r[p]=o[p*2]*256+o[p*2+1];var u=[];return r.forEach(function(f){u.push(e(f))}),i.decompress(u.join(""))},compressToEncodedURIComponent:function(o){return o==null?"":i._compress(o,6,function(r){return n.charAt(r)})},decompressFromEncodedURIComponent:function(o){return o==null?"":o==""?null:(o=o.replace(/ /g,"+"),i._decompress(o.length,32,function(r){return m(n,o.charAt(r))}))},compress:function(o){return i._compress(o,16,function(r){return e(r)})},_compress:function(o,r,p){if(o==null)return"";var l,u,f={},b={},S="",w="",h="",E=2,T=3,g=2,y=[],a=0,c=0,x;for(x=0;x<o.length;x+=1)if(S=o.charAt(x),Object.prototype.hasOwnProperty.call(f,S)||(f[S]=T++,b[S]=!0),w=h+S,Object.prototype.hasOwnProperty.call(f,w))h=w;else{if(Object.prototype.hasOwnProperty.call(b,h)){if(h.charCodeAt(0)<256){for(l=0;l<g;l++)a=a<<1,c==r-1?(c=0,y.push(p(a)),a=0):c++;for(u=h.charCodeAt(0),l=0;l<8;l++)a=a<<1|u&1,c==r-1?(c=0,y.push(p(a)),a=0):c++,u=u>>1}else{for(u=1,l=0;l<g;l++)a=a<<1|u,c==r-1?(c=0,y.push(p(a)),a=0):c++,u=0;for(u=h.charCodeAt(0),l=0;l<16;l++)a=a<<1|u&1,c==r-1?(c=0,y.push(p(a)),a=0):c++,u=u>>1}E--,E==0&&(E=Math.pow(2,g),g++),delete b[h]}else for(u=f[h],l=0;l<g;l++)a=a<<1|u&1,c==r-1?(c=0,y.push(p(a)),a=0):c++,u=u>>1;E--,E==0&&(E=Math.pow(2,g),g++),f[w]=T++,h=String(S)}if(h!==""){if(Object.prototype.hasOwnProperty.call(b,h)){if(h.charCodeAt(0)<256){for(l=0;l<g;l++)a=a<<1,c==r-1?(c=0,y.push(p(a)),a=0):c++;for(u=h.charCodeAt(0),l=0;l<8;l++)a=a<<1|u&1,c==r-1?(c=0,y.push(p(a)),a=0):c++,u=u>>1}else{for(u=1,l=0;l<g;l++)a=a<<1|u,c==r-1?(c=0,y.push(p(a)),a=0):c++,u=0;for(u=h.charCodeAt(0),l=0;l<16;l++)a=a<<1|u&1,c==r-1?(c=0,y.push(p(a)),a=0):c++,u=u>>1}E--,E==0&&(E=Math.pow(2,g),g++),delete b[h]}else for(u=f[h],l=0;l<g;l++)a=a<<1|u&1,c==r-1?(c=0,y.push(p(a)),a=0):c++,u=u>>1;E--,E==0&&(E=Math.pow(2,g),g++)}for(u=2,l=0;l<g;l++)a=a<<1|u&1,c==r-1?(c=0,y.push(p(a)),a=0):c++,u=u>>1;for(;;)if(a=a<<1,c==r-1){y.push(p(a));break}else c++;return y.join("")},decompress:function(o){return o==null?"":o==""?null:i._decompress(o.length,32768,function(r){return o.charCodeAt(r)})},_decompress:function(o,r,p){var l=[],u,f=4,b=4,S=3,w="",h=[],E,T,g,y,a,c,x,d={val:p(0),position:r,index:1};for(E=0;E<3;E+=1)l[E]=E;for(g=0,a=Math.pow(2,2),c=1;c!=a;)y=d.val&d.position,d.position>>=1,d.position==0&&(d.position=r,d.val=p(d.index++)),g|=(y>0?1:0)*c,c<<=1;switch(u=g){case 0:for(g=0,a=Math.pow(2,8),c=1;c!=a;)y=d.val&d.position,d.position>>=1,d.position==0&&(d.position=r,d.val=p(d.index++)),g|=(y>0?1:0)*c,c<<=1;x=e(g);break;case 1:for(g=0,a=Math.pow(2,16),c=1;c!=a;)y=d.val&d.position,d.position>>=1,d.position==0&&(d.position=r,d.val=p(d.index++)),g|=(y>0?1:0)*c,c<<=1;x=e(g);break;case 2:return""}for(l[3]=x,T=x,h.push(x);;){if(d.index>o)return"";for(g=0,a=Math.pow(2,S),c=1;c!=a;)y=d.val&d.position,d.position>>=1,d.position==0&&(d.position=r,d.val=p(d.index++)),g|=(y>0?1:0)*c,c<<=1;switch(x=g){case 0:for(g=0,a=Math.pow(2,8),c=1;c!=a;)y=d.val&d.position,d.position>>=1,d.position==0&&(d.position=r,d.val=p(d.index++)),g|=(y>0?1:0)*c,c<<=1;l[b++]=e(g),x=b-1,f--;break;case 1:for(g=0,a=Math.pow(2,16),c=1;c!=a;)y=d.val&d.position,d.position>>=1,d.position==0&&(d.position=r,d.val=p(d.index++)),g|=(y>0?1:0)*c,c<<=1;l[b++]=e(g),x=b-1,f--;break;case 2:return h.join("")}if(f==0&&(f=Math.pow(2,S),S++),l[x])w=l[x];else if(x===b)w=T+T.charAt(0);else return null;h.push(w),l[b++]=T+w.charAt(0),f--,T=w,f==0&&(f=Math.pow(2,S),S++)}}};return i}();typeof define=="function"&&define.amd?define(function(){return Y}):typeof j<"u"&&j!=null&&(j.exports=Y)});var O=`<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>LiveCodes</title>
    <script>
      window.addEventListener('message', function (event) {
        if (event.data.result) {
          document.write(event.data.result);
          document.close();
        }
      });
    <\/script>
  </head>
  <body></body>
</html>
`;var F=`<div id="deploy-container" class="modal-container">
  <div class="modal-title">Deploy to GitHub Pages</div>
  <ul id="deploy-tabs" class="modal-tabs">
    <li data-target="new-repo" class="active">Create New Repo</li>
    <li data-target="existing-repo">Existing Repo</li>
  </ul>
  <div id="deploy-screens" class="modal-screen-container">
    <div id="new-repo" class="tab-content active">
      <div class="modal-screen">
        <form id="new-repo-form">
          <div>
            <label for="new-repo-name"
              >Repo Name <span id="new-repo-name-error" class="error"></span
            ></label>
            <input type="text" id="new-repo-name" placeholder="Required" />
          </div>
          <div>
            <label for="new-repo-message">Commit Message</label>
            <input type="text" id="new-repo-message" placeholder="Optional" />
          </div>
          <div class="padded">
            <input type="checkbox" id="new-repo-source" />
            <label for="new-repo-source">Commit source code (public)</label>
          </div>
          <button id="new-repo-btn" class="wide-button" type="submit">Deploy</button>
        </form>
        <div class="description">
          A new <strong>public</strong> repo will be created. The result page will be pushed to
          <span class="code">gh-pages</span> branch.
        </div>
      </div>
    </div>
    <div id="existing-repo" class="tab-content">
      <div class="modal-screen">
        <form id="existing-repo-form">
          <div>
            <label for="existing-repo-name">Repo Name</label>
            <input
              type="text"
              id="existing-repo-name"
              autocomplete="off"
              placeholder="Loading..."
            />
          </div>
          <div>
            <label for="existing-repo-message">Commit Message</label>
            <input type="text" id="existing-repo-message" placeholder="Optional" />
          </div>
          <div class="padded">
            <input type="checkbox" id="existing-repo-source" />
            <label for="existing-repo-source">Commit source code (public)</label>
          </div>
          <button id="existing-repo-btn" class="wide-button" type="submit">Deploy</button>
        </form>
        <div class="description">
          A new commit will be added to <span class="code">gh-pages</span> branch.
        </div>
      </div>
    </div>
  </div>
</div>
`;var D=e=>e.replace(/{{APP_VERSION}}/g,"4").replace(/{{SDK_VERSION}}/g,"0.0.2").replace(/{{COMMIT_SHA}}/g,"b09b1b6").replace(/{{REPO_URL}}/g,"https://github.com/live-codes/livecodes").replace(/{{DOCS_BASE_URL}}/g,"/livecodes/docs/"),N=D(O);var W=D(F);var J=["jspm","skypack"],G=["jsdelivr","unpkg","fastly.jsdelivr"],K=["jsdelivr.gh","statically"],v={getModuleUrl:(e,{isModule:t=!0,defaultCDN:n="jspm"}={})=>{e=e.replace(/#nobundle/g,"");let s=z(e,t,n);return s||(t?"https://jspm.dev/"+e:"https://cdn.jsdelivr.net/npm/"+e)},getUrl:(e,t)=>e.startsWith("http")?e:z(e,!1,t||Re())||e,cdnLists:{npm:G,module:J,gh:K},checkCDNs:async(e,t)=>{let n=[t,...v.cdnLists.npm].filter(Boolean);for(let s of n)try{if((await fetch(v.getUrl(e,s),{method:"HEAD"})).ok)return s}catch{}return v.cdnLists.npm[0]}},Re=()=>{if(globalThis.appCDN)return globalThis.appCDN;try{return new URL(location.href).searchParams.get("appCDN")||v.cdnLists.npm[0]}catch{return v.cdnLists.npm[0]}},z=(e,t,n)=>{let s=t&&e.startsWith("unpkg:")?"?module":"";e.startsWith("gh:")?e=e.replace("gh",K[0]):e.includes(":")||(e=(n||(t?J[0]:G[0]))+":"+e);for(let m of Ae){let[i,o]=m;if(i.test(e))return e.replace(i,o)+s}return null},Ae=[[/^(jspm:)(.+)/i,"https://jspm.dev/$2"],[/^(npm:)(.+)/i,"https://jspm.dev/$2"],[/^(node:)(.+)/i,"https://jspm.dev/$2"],[/^(skypack:)(.+)/i,"https://cdn.skypack.dev/$2"],[/^(jsdelivr:)(.+)/i,"https://cdn.jsdelivr.net/npm/$2"],[/^(fastly.jsdelivr:)(.+)/i,"https://fastly.jsdelivr.net/npm/$2"],[/^(jsdelivr.gh:)(.+)/i,"https://cdn.jsdelivr.net/gh/$2"],[/^(statically:)(.+)/i,"https://cdn.statically.io/gh/$2"],[/^(esm.run:)(.+)/i,"https://esm.run/$2"],[/^(esm.sh:)(.+)/i,"https://esm.sh/$2"],[/^(esbuild:)(.+)/i,"https://esbuild.vercel.app/$2"],[/^(bundle.run:)(.+)/i,"https://bundle.run/$2"],[/^(unpkg:)(.+)/i,"https://unpkg.com/$2"],[/^(bundlejs:)(.+)/i,"https://deno.bundlejs.com/?file&q=$2"],[/^(bundle:)(.+)/i,"https://deno.bundlejs.com/?file&q=$2"],[/^(deno:)(.+)/i,"https://deno.bundlejs.com/?file&q=https://deno.land/x/$2/mod.ts"],[/^(https:\/\/deno\.land\/.+)/i,"https://deno.bundlejs.com/?file&q=$1"],[/^(github:|https:\/\/github\.com\/)(.[^\/]+?)\/(.[^\/]+?)\/(?!releases\/)(?:(?:blob|raw)\/)?(.+?\/.+)/i,"https://deno.bundlejs.com/?file&q=https://cdn.jsdelivr.net/gh/$2/$3@$4"],[/^(gist\.github:)(.+?\/[0-9a-f]+\/raw\/(?:[0-9a-f]+\/)?.+)$/i,"https://gist.githack.com/$2"],[/^(gitlab:|https:\/\/gitlab\.com\/)([^\/]+.*\/[^\/]+)\/(?:raw|blob)\/(.+?)(?:\?.*)?$/i,"https://deno.bundlejs.com/?file&q=https://gl.githack.com/$2/raw/$3"],[/^(bitbucket:|https:\/\/bitbucket\.org\/)([^\/]+\/[^\/]+)\/(?:raw|src)\/(.+?)(?:\?.*)?$/i,"https://deno.bundlejs.com/?file&q=https://bb.githack.com/$2/raw/$3"],[/^(bitbucket:)snippets\/([^\/]+\/[^\/]+)\/revisions\/([^\/\#\?]+)(?:\?[^#]*)?(?:\#file-(.+?))$/i,"https://bb.githack.com/!api/2.0/snippets/$2/$3/files/$4"],[/^(bitbucket:)snippets\/([^\/]+\/[^\/\#\?]+)(?:\?[^#]*)?(?:\#file-(.+?))$/i,"https://bb.githack.com/!api/2.0/snippets/$2/HEAD/files/$3"],[/^(bitbucket:)\!api\/2.0\/snippets\/([^\/]+\/[^\/]+\/[^\/]+)\/files\/(.+?)(?:\?.*)?$/i,"https://bb.githack.com/!api/2.0/snippets/$2/files/$3"],[/^(api\.bitbucket:)2.0\/snippets\/([^\/]+\/[^\/]+\/[^\/]+)\/files\/(.+?)(?:\?.*)?$/i,"https://bb.githack.com/!api/2.0/snippets/$2/files/$3"],[/^(rawgit:)(.+?\/[0-9a-f]+\/raw\/(?:[0-9a-f]+\/)?.+)$/i,"https://gist.githack.com/$2"],[/^(rawgit:|https:\/\/raw\.githubusercontent\.com)(\/[^\/]+\/[^\/]+|[0-9A-Za-z-]+\/[0-9a-f]+\/raw)\/(.+)/i,"https://deno.bundlejs.com/?file&q=https://raw.githack.com/$2/$3"]];var{getUrl:V,getModuleUrl:rt}=v;var Z=V("@tarekraafat/autocomplete.js@10.2.6/dist/autoComplete.js");var _e="0.6.64",st=V(`malinajs@${_e}/malina.js`);var k=(e=location.origin)=>!!(e&&(e.endsWith("livecodes.io")||e.endsWith("livecodes.pages.dev")||e.endsWith("localpen.io")||e.endsWith("localpen.pages.dev")||e.startsWith("http://127.0.0.1")||e.startsWith("http://localhost")));var H=(e,t="_")=>e.replace(/[\W]+/g,t);var C=()=>(Date.now()+""+Math.floor(Math.floor(Math.random()*Date.now()))).substring(0,24);var I=qe(X());var ee="https://dpaste.com/",Pe="https://dpaste.com/api/v2/",te="https://api2.livecodes.io/share",oe={getProject:async e=>{try{let t=await fetch(ee+e+".txt");return t.ok?JSON.parse(await t.text()):{}}catch{return{}}},shareProject:async e=>{try{let t=await fetch(Pe,{method:"POST",mode:"cors",headers:{"Content-Type":"application/x-www-form-urlencoded","User-Agent":"LiveCodes / https://livecodes.io/"},body:`content=${encodeURIComponent(JSON.stringify(e))}&title=${encodeURIComponent(e.title||"")}&syntax=json&expiry_days=365`});return t.ok?(await t.text()).replace(ee,""):""}catch{return""}}},$e={getProject:async e=>{if(e.length<11)return oe.getProject(e);if(!k())return{};try{let t=await fetch(te+"?id="+e);return t.ok?JSON.parse(await t.text()):{}}catch{return{}}},shareProject:async e=>{if(!k())return"";try{let t=await fetch(te,{method:"POST",mode:"cors",body:JSON.stringify(e)});return t.ok?t.text():""}catch{return""}}},bo=k()?$e:oe;var ne=(e,{getLanguageExtension:t})=>{let n={markup:"index",style:"style",script:"script"},s=Object.keys(n).reduce((r,p)=>{let l=n[p],u=e[p].language,f=t?.(u)||"md",b=e[p].content||"";return{...r,...b?{[l+"."+f]:{content:b}}:{}}},{}),m=e.stylesheets.length>0?{styles:{content:e.stylesheets.map(r=>`<link rel="stylesheet" href="${r}" />`).join(`
`)}}:void 0,i=e.scripts.length>0?{scripts:{content:e.scripts.map(r=>`<script src="${r}"><\/script>`).join(`
`)}}:void 0,o=e.tests?.content?{["script.spec."+t?.(e.tests?.language)||"ts"]:{content:e.tests?.content}}:void 0;return{...s,...m,...i,...o}},re=(e,t,n,s=!0)=>{let m=s?"https://gist.github.com/":"https://github.com/",i=t?t.username?"by ["+t.displayName+"]("+m+t.username+")":"by "+t.displayName:"",o=n?`[project](https://livecodes.io/?x=${n})`:"project";return{[H(e.title)+".md"]:{content:`# ${e.title}
A ${o} created ${i} on [LiveCodes](https://livecodes.io).`}}};var L=(e,t)=>({Accept:`application/vnd.github.v3${t?"."+t:""}+json`,"Content-Type":"application/json",Authorization:"token "+e.token}),se=async(e,t)=>{try{return(await fetch(`https://api.github.com/repos/${e.username}/${t}`,{method:"GET",cache:"no-store",headers:L(e)})).ok}catch{return!1}},ie=async(e,t,n=!1,s)=>{let m=await fetch("https://api.github.com/user/repos",{method:"POST",cache:"no-store",headers:L(e),body:JSON.stringify({name:t,private:n,...n?{}:{homepage:`https://${e.username}.github.io/${t}/`},...s?{description:s}:{}})});if(!m.ok)throw await m.json().then(o=>o.errors[0]?.message)==="name already exists on this account"?new Error("Repo name already exists"):new Error("Error creating repo");return m.json().then(i=>i.name)},ce=async({user:e,repo:t,branch:n,file:s,message:m,initialize:i=!1,encoded:o=!1})=>{let r=`https://api.github.com/repos/${e.username}/${t}/contents/`,p=s.path.split("/").slice(0,-1).join("/"),l;if(!i){let f=await fetch(r+p,{method:"GET",cache:"no-store",headers:L(e)});f.ok&&(l=(await f.json()).find(S=>S.path===s.path)?.sha)}let u=await fetch(r+s.path,{method:"PUT",cache:"no-store",headers:L(e),body:JSON.stringify({message:m||"deploy",content:o?s.content:btoa(s.content),branch:n,...l?{sha:l}:{}})});if(!u.ok)throw new Error("Error creating file");return u.json()};var R=async(e,t,n="main",s)=>(await ce({user:e,repo:t,branch:n,file:{path:"README.md",content:`${s||"# "+t+`
`}`},message:"initial commit",initialize:!0,encoded:!1}))?.commit.sha,Oe=async(e,t,n)=>{let s=await fetch(`https://api.github.com/repos/${e.username}/${t}/git/matching-refs/heads/${n}?per_page=100`,{method:"GET",cache:"no-store",headers:L(e)}),m=await s.json();if(m.message==="Git Repository is empty."){let o=await R(e,t,"main");return n==="main"?o:null}if(!s.ok)throw new Error("Error getting last commit");let i=m.find(o=>o.ref===`refs/heads/${n}`);return i?i.object.sha:null},Fe=async(e,t,n)=>{let s=await fetch(`https://api.github.com/repos/${e.username}/${t}/commits/${n}`,{method:"GET",cache:"no-store",headers:L(e)});if(!s.ok)throw new Error("Error getting commit tree");let i=(await s.json())?.commit?.tree?.sha;return i||null},De=async(e,t,n,s)=>{let m=n.map(o=>({path:o.path,mode:"100644",type:"blob",content:o.content})),i=await fetch(`https://api.github.com/repos/${e.username}/${t}/git/trees`,{method:"POST",cache:"no-store",headers:L(e),body:JSON.stringify({...s?{base_tree:s}:{},tree:m})});if(!i.ok)throw new Error("Error creating tree");return i.json().then(o=>o.sha)},Ne=async(e,t,n,s,m)=>{let i=await fetch(`https://api.github.com/repos/${e.username}/${t}/git/commits`,{method:"POST",cache:"no-store",headers:L(e),body:JSON.stringify({tree:s,message:n||"deploy",...m?{parents:[m]}:{}})});if(!i.ok)throw new Error("Error creating commit");return i.json().then(o=>o.sha)},We=async(e,t,n,s)=>{if(!(await fetch(`https://api.github.com/repos/${e.username}/${t}/git/refs`,{method:"POST",cache:"no-store",headers:L(e),body:JSON.stringify({ref:`refs/heads/${n}`,sha:s})})).ok)throw new Error("Error creating branch");return!0},ze=async(e,t,n,s)=>{if(!(await fetch(`https://api.github.com/repos/${e.username}/${t}/git/refs/heads/${n}`,{method:"PATCH",cache:"no-store",headers:L(e),body:JSON.stringify({sha:s})})).ok)throw new Error("Error updating branch");return!0},ae=async({files:e,user:t,repo:n,branch:s,message:m,newRepo:i,privateRepo:o,description:r,readmeContent:p,clearPrevious:l=!0})=>{let u,f,b,S=!1;i&&(n=H(n,"-").toLowerCase());try{if(i||!await se(t,n)){i=!0,await ie(t,n,o,r);let h=await R(t,n,"main",p);u=s==="main"?h:null}else u=await Oe(t,n,s);let w=u&&!l?await Fe(t,n,u):null;return f=await De(t,n,e,w),b=await Ne(t,n,m,f,u),u?S=await ze(t,n,s,b):S=await We(t,n,s,b),S?{tree:f,commit:b}:null}catch{return null}},le=async({file:e,user:t,repo:n,branch:s,message:m,newRepo:i,privateRepo:o,description:r,readmeContent:p})=>{try{(i||!await se(t,n))&&(i=!0,n=H(n,"-").toLowerCase(),await ie(t,n,o,r),await R(t,n,s,p));let l=await ce({user:t,repo:n,branch:s,file:e,message:m,initialize:i||!1,encoded:!0});return{tree:l?.commit?.tree?.sha,commit:l?.commit?.sha}}catch{return null}},pe=async(e,t="public")=>{let n=1,s=100,m=5,i=[];for(;n<=m;){let o=await fetch(`https://api.github.com/user/repos?type=${t}&per_page=${s}&page=${n}`,{method:"GET",cache:"no-store",headers:L(e)});if(n+=1,!o.ok)continue;let r=await o.json();i.push(...r.map(p=>p.name)),r.length<s&&(n=m+1)}return i};var ue={title:"Untitled Project",description:"",tags:[],autoupdate:!0,autosave:!1,delay:1500,formatOnsave:!1,mode:"full",theme:"dark",recoverUnsaved:!0,showSpacing:!1,welcome:!0,readonly:!1,allowLangChange:!0,activeEditor:void 0,languages:void 0,markup:{language:"html",content:""},style:{language:"css",content:""},script:{language:"javascript",content:""},stylesheets:[],scripts:[],cssPreset:"",imports:{},types:{},tests:{language:"typescript",content:""},tools:{enabled:"all",active:"",status:""},zoom:1,processors:[],customSettings:{},editor:void 0,fontFamily:void 0,fontSize:void 0,useTabs:!1,tabSize:2,lineNumbers:!0,wordWrap:!1,closeBrackets:!0,semicolons:!0,singleQuote:!1,trailingComma:!0,emmet:!0,editorMode:void 0,version:"4"};var Je=({config:e,content:t,commitSource:n,singleFile:s,deps:m})=>{let i=[{path:"index.html",content:t.resultPage}];if(s||i.push({path:"style.css",content:t.style||""},{path:"script.js",content:t.script||""}),n){let o=ne(e,m);i.push(...Object.keys(o).map(r=>({path:"src/"+r,content:o[r].content})),{path:"src/livecodes.json",content:JSON.stringify(e,null,2)})}return i},me=async({user:e,repo:t,config:n,content:s,message:m,commitSource:i=!0,singleFile:o,newRepo:r=!0,deps:p})=>{r&&(t=H(t,"-").toLowerCase());let l=Je({config:n,content:s,commitSource:i,singleFile:o,deps:p}),u="gh-pages",f=i?`https://github.com/${e.username}/${t}/tree/gh-pages/src`:void 0,b=n.title!==ue.title?n.title:"",S=Object.values(re(n,e,f,!1))[0].content,w=await ae({files:l,user:e,repo:t,branch:u,message:m,newRepo:r,privateRepo:!1,description:b,readmeContent:S,clearPrevious:!0});return w?{url:`https://${e.username}.github.io/${t}/`,username:e.username,repo:t,tree:w.tree,commit:w.commit}:null},Ge=async({file:e,user:t,repo:n,branch:s,message:m,description:i,readmeContent:o})=>{let r={path:`assets/${C()}/${e.path}`,content:e.content},p=await le({file:r,user:t,repo:n,branch:s,message:m,privateRepo:!1,description:i,readmeContent:o});return p?{url:`https://${t.username}.github.io/${n}/${r.path}`,username:t.username,repo:n,tree:p?.tree,commit:p?.commit}:null},de=(e,t)=>{let{url:n,username:s,repo:m,commit:i}=e,o=t?`
    <div class="description">
      <p>
        The source code is
        <a
          href="https://github.com/${s}/${m}/tree/${i}/src"
          target="_blank"
        >
          publicly available
        </a>
      </p>
      <p>
        Permanent link:
        <a
          href="https://livecodes.io/?config=https://raw.githubusercontent.com/${s}/${m}/${i}/src/livecodes.json"
          target="_blank"
        >
          Edit in LiveCodes
        </a>
      </p>
    </div>
`:"",r=`
    <div id="deploy-container" class="modal-container">
      <div class="modal-title">Deployed Successfully!</div>
      <p>
        Your project has been deployed successfully to GitHub Pages, and will shortly be available on: <br />
        <a href="${n}" target="_blank">${n}</a>
      </p>
      ${o}
    </div>
  `,p=document.createElement("div");return p.innerHTML=r,p};var ge=e=>e.querySelector("#new-repo-form"),fe=e=>e.querySelector("#new-repo-btn"),ye=e=>e.querySelector("#new-repo-name"),he=e=>e.querySelector("#new-repo-name-error"),xe=e=>e.querySelector("#new-repo-message"),be=e=>e.querySelector("#new-repo-source");var Se=e=>e.querySelector("#existing-repo-form"),we=e=>e.querySelector("#existing-repo-btn"),A=e=>e.querySelector("#existing-repo-name"),_=e=>e.querySelector("#existing-repo-message"),Ee=e=>e.querySelector("#existing-repo-source");var Ke=(e,t)=>{let n=document.createElement("div");n.innerHTML=W;let s=n.firstChild,m=s.querySelectorAll("#deploy-tabs li");return m.forEach(i=>{e.addEventListener(i,"click",()=>{m.forEach(r=>r.classList.remove("active")),i.classList.add("active"),document.querySelectorAll("#deploy-screens > div").forEach(r=>{r.classList.remove("active")});let o=s.querySelector("#"+i.dataset.target);o?.classList.add("active"),o?.querySelector("input")?.focus()})}),t&&setTimeout(()=>{m[1].click();let i=A(s),o=_(s);i.value=t,o.focus()}),s},an=async({modal:e,notifications:t,eventsManager:n,user:s,deployRepo:m,deps:i})=>{let o=Ke(n,m),r=ge(o),p=fe(o),l=ye(o),u=he(o),f=xe(o),b=be(o),S=Se(o),w=we(o),h=A(o),E=_(o),T=Ee(o),g=async(a,c,x,d,M)=>{u.innerHTML="";let Le=await i.getResultPage({forExport:!0,template:N,singleFile:!1}),B=i.getCache(),P=await me({user:a,repo:c,config:i.getContentConfig(i.getConfig()),content:{resultPage:Le,style:B.style.compiled||"",script:B.script.compiled||""},message:x,commitSource:d,singleFile:!1,newRepo:M,deps:{getLanguageExtension:i.getLanguageExtension}}).catch(U=>{U.message==="Repo name already exists"&&(u.innerHTML=U.message)});if(u.innerHTML!=="")return!1;if(P){await i.setProjectDeployRepo(c);let U=de(P,d);return e.show(U,{size:"small",closeButton:!0}),!0}else return e.close(),t.error("Deployment failed!"),!0};n.addEventListener(r,"submit",async a=>{if(a.preventDefault(),!s)return;let c=l.value.replace(/[^A-Za-z0-9_.-]/g,"-"),x=f.value,d=b.checked,M=!0;if(!c){t.error("Repo name is required");return}p.innerHTML="Deploying...",p.disabled=!0,await g(s,c,x,d,M)||(p.innerHTML="Deploy",p.disabled=!1)}),n.addEventListener(S,"submit",async a=>{if(a.preventDefault(),!s)return;let c=h.value,x=E.value,d=T.checked,M=!1;if(!c){t.error("Repo name is required");return}w.innerHTML="Deploying...",w.disabled=!0,await g(s,c,x,d,M)});let y;import(Z).then(async()=>{if(y=globalThis.autoComplete,!s)return;let a=await pe(s);n.addEventListener(h,"init",()=>{m||h.focus()});let c="#"+h.id;if(!document.querySelector(c))return;let x=new y({selector:c,placeHolder:"Search your public repos...",data:{src:a},resultItem:{highlight:{render:!0}}});n.addEventListener(x.input,"selection",function(d){let M=d.detail;x.input.blur();let q=M.selection.value;x.input.value=q})}),e.show(o,{isAsync:!0}),l.focus()};export{an as createDeployUI,Ge as deployFile};
//# sourceMappingURL=deploy.js.map
